# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

type RespondentDetails {
  ideology: String!
  compassPoint: [Float!]!
}

type TextTranslation {
  pl: String
  en: String
}

type IdeologyIcon {
  type: String!
  value: String!
}

type User {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  emailVerified: Boolean!
  name: String!
  role: UserRole!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum UserRole {
  REGULAR
  ADMIN
  MODERATOR
}

type Ideology {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: TextTranslation!
  description: TextTranslation!
  color: String!
  icon: IdeologyIcon!
  authors: [User!]!
  viewerCanEdit: Boolean!
}

type QuizAxis {
  id: String!
  name: TextTranslation
  left: Ideology
  right: Ideology
}

type Party {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  logoUrl: String!
  country: Country!
  authors: [User!]!
  viewerCanEdit: Boolean!
}

enum Country {
  POLAND
  ENGLAND
  UNITED_STATES
}

type QuestionPositiveEffect {
  ideologies: [Ideology]!
  parties: [Party]!
}

type QuestionEffects {
  agree: QuestionPositiveEffect!
  disagree: QuestionPositiveEffect!
}

type Question {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: TextTranslation!
  effects: QuestionEffects!
  authors: [User!]!
}

type QuizCompassIdeology {
  ideology: Ideology!
  weight: Int!
}

type QuizCompassAxis {
  name: TextTranslation
  leftIdeologies: [QuizCompassIdeology!]!
  rightIdeologies: [QuizCompassIdeology!]!
}

type QuizCompassMode {
  name: TextTranslation
  horizontal: QuizCompassAxis!
  vertical: QuizCompassAxis!
  third: QuizCompassAxis
}

type QuizVersion {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  publishedOn: DateTime
  verifiedOn: DateTime
  axes: [QuizAxis]!
  parent: QuizVersion
  questions: [Question]!
  compassModes: [QuizCompassMode]!
  traits: [Ideology]!
  ideologies: [Ideology]!
  parties: [Party]!
  quiz: Quiz!
}

type SurveyAnswer {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  question: Question!
  type: SurveyAnswerType!
  weight: Float!
}

enum SurveyAnswerType {
  NEUTRAL
  AGREE
  DISAGREE
}

type Survey {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  answers: [SurveyAnswer!]!
  finished: Boolean!
  quizVersion: QuizVersion!
}

type Respondent {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  code: [String!]!
  details: RespondentDetails
  surveys: [Survey]!
}

type QuizFeatures {
  compass: Boolean!
  traits: Boolean!
  axesNumber: Int!
  questionsNumber: Int!
  parties: Boolean!
  politiciansResults: Boolean!
  authorizedParties: [Party]!
}

type QuizStatistics {
  surveysNumber: Int!
}

type QuizVotes {
  voters: [User!]!
  value: Int!
}

type QuizMeta {
  features: QuizFeatures!
  statistics: QuizStatistics!
  votes: QuizVotes!
  authors: [User!]!
  license: QuizLicense!
}

enum QuizLicense {
  COMMERCIAL
  MIT
}

type QuizVerifyRequest {
  version: QuizVersion!
  moderator: User
  reason: String
  state: QuizVerificationState!
}

enum QuizVerificationState {
  IDLE
  ACCEPTED
  DECLINED
}

type Quiz {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  slug: String!
  logoUrl: String!
  type: QuizType!
  title: TextTranslation!
  description: TextTranslation!
  meta: QuizMeta!
  verifyRequest: QuizVerifyRequest
  currentVersion: QuizVersion!
  lastUpdatedVersion: QuizVersion!
  versions: [QuizVersion]!
}

enum QuizType {
  OFFICIAL
  COMMUNITY
  CLASSIC
}

type ResultsParty {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  logoUrl: String!
  country: Country!
  authors: [User!]!
  viewerCanEdit: Boolean!
  agreementPoints: Int!
  disagreementPoints: Int!
  percentAgreement: Int!
}

type ResultsIdeology {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: TextTranslation!
  description: TextTranslation!
  color: String!
  icon: IdeologyIcon!
  authors: [User!]!
  viewerCanEdit: Boolean!
  points: Int!
  maxPoints: Int!
}

type ResultsAxis {
  name: TextTranslation
  left: ResultsIdeology!
  right: ResultsIdeology!
  maxPoints: Int!
}

type ResultsCompassPoint {
  horizontal: Float!
  vertical: Float!
  third: Float
}

type ResultsCompass {
  name: TextTranslation
  horizontal: QuizCompassAxis!
  vertical: QuizCompassAxis!
  third: QuizCompassAxis
  point: ResultsCompassPoint!
}

type Results {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  axes: [ResultsAxis!]!
  parties: [ResultsParty!]!
  compasses: [ResultsCompass!]!
  quiz: Quiz!
  traits: [Ideology!]!
}

type Query {
  respondent(code: [String!]!): Respondent!
  meRespondent: Respondent!
  verifyAdmin: Boolean!
  survey(id: String!): Survey!
  quiz(slug: String!): Quiz!
  featuredQuizzes: [Quiz!]!
  currentUserQuizzes: [Quiz!]!
  verifyQueueQuizzes: [Quiz!]!
  quizVersion(id: String!): QuizVersion!
  me: User!
  results(surveyId: String!): Results!
}

type Mutation {
  createRespondent(createRespondentInput: CreateRespondentInput!): Respondent!
  updateRespondent(updateRespondentInput: UpdateRespondentInput!): Respondent!
  changeCode(code: [String!]!): Respondent!
  removeMe: Respondent!
  createSurvey(createSurveyInput: CreateSurveyInput!): Survey!
  updateSurvey(updateSurveyInput: UpdateSurveyInput!, id: String!): Survey!
  deleteSurvey(id: String!): Boolean!
  createQuiz(createQuizInput: CreateQuizInput!): Quiz!
  updateQuiz(updateQuizInput: UpdateQuizInput!, id: String!): Quiz!
  requestQuizVerify(recaptcha: String!, quizVersion: String!): Boolean!
  verifyQuiz(verifyQuizInput: VerifyQuizInput!, quizVersion: String!): Boolean!
  voteQuiz(type: QuizVoteType!, id: String!): Boolean!
  createQuizVersion(createQuizVersionInput: CreateQuizVersionInput!, quizId: String!): QuizVersion!
  saveQuizVersion(saveQuizVersionInput: UpdateQuizVersionInput!, publish: Boolean!, id: String!): QuizVersion!
  updateQuizVersion(updateQuizVersionInput: UpdateQuizVersionInput!, id: String!): QuizVersion!
  createUser(createUserInput: CreateUserInput!): User!
  loginUser(loginUserInput: LoginUserInput!): User!
  logoutMe: Boolean!
  createIdeology(createIdeologyInput: CreateIdeologyInput!): Ideology!
  updateIdeology(updateIdeologyInput: UpdateIdeologyInput!, id: String!): Ideology!
  createParty(createPartyInput: CreatePartyInput!): Party!
  updateParty(updatePartyInput: UpdatePartyInput!, id: String!): Party!
  createQuestion(createQuestionInput: CreateQuestionInput!): Question!
  createManyQuestions(createManyQuestionsInput: [CreateQuestionInput!]!, quizVersion: String!): [Question!]!
  updateQuestion(updateQuestionInput: UpdateQuestionInput!, id: String!): Question!
  addPartyAnswers(addPartyAnswersInput: [AddPartyAnswersInput!]!, quizVersionId: String!, partyId: String!): Boolean!
}


input CreateRespondentInput {
  lang: Language!
}

enum Language {
  POLISH
  ENGLISH
}

input UpdateRespondentInput {
  details: RespondentDetailsInput!
}

input RespondentDetailsInput {
  ideology: String!
  compassPoint: [Float!]!
}

input CreateSurveyInput {
  quizVersion: String!
}

input UpdateSurveyInput {
  answers: [SurveyAnswerInput]!
  finished: Boolean
}

input SurveyAnswerInput {
  question: String!
  type: SurveyAnswerType!
  weight: Float!
}

input CreateQuizInput {
  logoUrl: String!
  title: TextTranslationInput!
  description: TextTranslationInput!
}

input TextTranslationInput {
  pl: String
  en: String
}

input UpdateQuizInput {
  title: TextTranslationInput
  logoUrl: String
  description: TextTranslationInput
  currentVersion: String
}

input VerifyQuizInput {
  state: QuizVerificationState!
  reason: String!
}

enum QuizVoteType {
  FOR
  AGAINST
}

input CreateQuizVersionInput {
  publishedOn: String
  axes: [QuizAxisInput]!
  parent: String
  compassModes: [QuizCompassModeInput]!
}

input QuizAxisInput {
  name: TextTranslationInput
  left: String
  right: String
}

input QuizCompassModeInput {
  name: TextTranslationInput!
  horizontal: QuizCompassAxisInput!
  vertical: QuizCompassAxisInput!
  third: QuizCompassAxisInput
}

input QuizCompassAxisInput {
  name: TextTranslationInput
  leftIdeologies: [QuizCompassIdeologyInput!]!
  rightIdeologies: [QuizCompassIdeologyInput!]!
}

input QuizCompassIdeologyInput {
  ideology: String!
  weight: Int!
}

input UpdateQuizVersionInput {
  publishedOn: DateTime
  axes: [QuizAxisInput!]
  parent: String
  compassModes: [QuizCompassModeInput]!
  traits: [String]!
  questions: [String]!
  ideologies: [String]!
  parties: [String]!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  recaptcha: String!
}

input LoginUserInput {
  email: String!
  password: String!
  recaptcha: String!
}

input CreateIdeologyInput {
  name: TextTranslationInput!
  description: TextTranslationInput!
  color: String!
  icon: IdeologyIconInput!
}

input IdeologyIconInput {
  type: String!
  value: String!
}

input UpdateIdeologyInput {
  name: TextTranslationInput!
  description: TextTranslationInput!
  color: String!
  icon: IdeologyIconInput!
}

input CreatePartyInput {
  name: String!
  logoUrl: String!
  country: Country!
}

input UpdatePartyInput {
  name: String!
  logoUrl: String!
  country: Country!
}

input CreateQuestionInput {
  text: TextTranslationInput!
  effects: QuestionEffectsInput!
}

input QuestionEffectsInput {
  agree: QuestionPositiveEffectInput!
  disagree: QuestionPositiveEffectInput!
}

input QuestionPositiveEffectInput {
  ideologies: [String!]!
  parties: [String!]!
}

input UpdateQuestionInput {
  text: TextTranslationInput!
  effects: QuestionEffectsInput!
}

input AddPartyAnswersInput {
  questionText: TextTranslationInput!
  answer: SurveyAnswerType!
}
